/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import java.util.IdentityHashMap;
import java.util.List;

import minijava.node.AArrayAllocExp;
import minijava.node.ACallStmt;
import minijava.node.AClassDecl;
import minijava.node.AClassType;
import minijava.node.AFieldAccessExp;
import minijava.node.AIdentifierExp;
import minijava.node.AIntarrayType;
import minijava.node.AMainClass;
import minijava.node.AMethodCallExp;
import minijava.node.AMethodDecl;
import minijava.node.AObjAllocExp;
import minijava.node.AProgram;
import minijava.node.AThisExp;
import minijava.node.ATypedVar;
import minijava.node.Node;
import minijava.node.PClassDecl;
import minijava.node.PExp;
import minijava.node.PMethodDecl;
import minijava.node.PType;
import minijava.node.PTypedVar;
import minijava.node.Start;
import minijava.node.TId;


public class NameVisitor extends DepthFirstAdapter
{

    private IdentityHashMap<            TId, AClassDecl>    classDecls;
    private IdentityHashMap<AFieldAccessExp,  ATypedVar>    fieldDecls;
    private IdentityHashMap< AMethodCallExp,AMethodDecl>   methodDecls;
    private IdentityHashMap<            TId,  ATypedVar> variableDecls;



    public NameVisitor() {
        classDecls    = new IdentityHashMap<            TId, AClassDecl>();
        fieldDecls    = new IdentityHashMap<AFieldAccessExp,  ATypedVar>();
        methodDecls   = new IdentityHashMap< AMethodCallExp,AMethodDecl>();
        variableDecls = new IdentityHashMap<            TId,  ATypedVar>();
    }


    public IdentityHashMap<TId,AClassDecl> getClassDecls() {
        return classDecls;
    }

    public IdentityHashMap<AFieldAccessExp,ATypedVar> getFieldDecls() {
        return fieldDecls;
    }

    public IdentityHashMap<AMethodCallExp,AMethodDecl> getMethodDecls() {
        return methodDecls;
    }

    public IdentityHashMap<TId,ATypedVar> getVariableDecls() {
        return variableDecls;
    }

    @Override
    public void inAProgram(AProgram node) {
        for(PClassDecl classDecl : node.getDecls()) {
            for(PTypedVar field : ((AClassDecl) classDecl).getFields()) {
                field.apply(this);
            }
            for(PMethodDecl method : ((AClassDecl) classDecl).getMethods()) {
                for(PTypedVar var : ((AMethodDecl) method).getLocalVars()) {
                    var.apply(this);
                }
                for(PTypedVar para : ((AMethodDecl) method).getFormalParams()) {
                    para.apply(this);
                }
                ((AMethodDecl) method).getRetType().apply(this);
            }
        }
    }

    @Override
    public void inAClassDecl(AClassDecl node) {
        TId idSuper = node.getSuper();
        if(idSuper == null) {
            return;
        }

        for(Node iter = node; !(iter instanceof Start); iter = iter.parent()) {
            if(iter instanceof AProgram) {
                List<PClassDecl> classes = ((AProgram) iter).getDecls();
                for(PClassDecl classDec : classes) {
                    if(((AClassDecl) classDec).getId().getText().equals(idSuper.getText())) {
                        classDecls.put(idSuper, (AClassDecl) classDec);
                        return;
                    }
                }
            }
        }
        throw new TypeCheckingExpcetion(node, "No suitable class declaration for '" + idSuper + "' found.");
    }

    @Override
    public void inAClassType(AClassType node) {
        TId id = node.getName();

        for(Node iter = node; !(iter instanceof Start); iter = iter.parent()) {
            if(iter instanceof AProgram) {
                List<PClassDecl> classes = ((AProgram) iter).getDecls();
                for(PClassDecl classDec : classes) {
                    if(((AClassDecl) classDec).getId().getText().equals(id.getText())) {
                        classDecls.put(id, (AClassDecl) classDec);
                        return;
                    }
                }
            }
        }
        throw new TypeCheckingExpcetion(node, "No suitable class declaration for '" + id + "' found.");
    }

    @Override
    public void caseACallStmt(ACallStmt node) {

        //Special case for System.out.println
        if(node.getExp() != null) {
            PExp exp = node.getExp();
            if(((AMethodCallExp) exp).getName().getText().equals("println")) {
                PExp obj = ((AMethodCallExp) exp).getObj();
                if(obj instanceof AFieldAccessExp) {
                    if(((AFieldAccessExp) obj).getName().getText().equals("out")) {
                        PExp obj2 = ((AFieldAccessExp) obj).getObj();
                        if(obj2 instanceof AIdentifierExp) {
                            if(((AIdentifierExp) obj2).getName().getText().equals("System")) {
                                List<PExp> args = ((AMethodCallExp) exp).getArgs();
                                for(PExp e : args) {
                                    e.apply(this);
                                }
                                return;
                            }
                        }
                    }
                }
            }
        }
        super.caseACallStmt(node);
    }

    @Override
    public void inAIdentifierExp(AIdentifierExp node) {
        TId id = node.getName();
        String idName = id.getText();

        for(Node iter = node; !(iter instanceof Start); iter = iter.parent()) {
            if(iter instanceof AMainClass) {
                List<PTypedVar> localVars = ((AMainClass) iter).getLocalVars();
                for(PTypedVar var : localVars) {
                    if(((ATypedVar) var).getName().getText().equals(idName)) {
                        variableDecls.put(id, (ATypedVar) var);
                        return;
                    }
                }
            }
            if(iter instanceof AMethodDecl) {
                List<PTypedVar> formalParams = ((AMethodDecl) iter).getFormalParams();
                for(PTypedVar var : formalParams) {
                    if(((ATypedVar) var).getName().getText().equals(idName)) {
                        variableDecls.put(id, (ATypedVar) var);
                        return;
                    }
                }
                List<PTypedVar> localVars = ((AMethodDecl) iter).getLocalVars();
                for(PTypedVar var : localVars) {
                    if(((ATypedVar) var).getName().getText().equals(idName)) {
                        variableDecls.put(id, (ATypedVar) var);
                        return;
                    }
                }
            }
            if(iter instanceof AClassDecl) {
                for(AClassDecl classDecl = (AClassDecl) iter; classDecl != null; classDecl = getSuperClass(classDecl)) {
                    List<PTypedVar> fields = classDecl.getFields();
                    for(PTypedVar var : fields) {
                        if(((ATypedVar) var).getName().getText().equals(idName)) {
                            variableDecls.put(id, (ATypedVar) var);
                            return;
                        }
                    }
                }
            }
        }
        throw new TypeCheckingExpcetion(node, "No suitable variable declaration for '" + idName + "' found.");
    }

    @Override
    public void inAObjAllocExp(AObjAllocExp node) {
        TId classId = node.getName();

        for(Node iter = node; !(iter instanceof Start); iter = iter.parent()) {
            if(iter instanceof AProgram) {
                List<PClassDecl> classes = ((AProgram) iter).getDecls();
                for(PClassDecl classDec : classes) {
                    if(((AClassDecl) classDec).getId().getText().equals(classId.getText())) {
                        classDecls.put(classId, (AClassDecl) classDec);
                        return;
                    }
                }
            }
        }
        throw new TypeCheckingExpcetion(node, "No suitable class declaration for '" + classId + "' found.");
    }

    @Override
    public void caseAFieldAccessExp(AFieldAccessExp node){
        PExp obj = node.getObj();
        String idName = node.getName().getText();

        //Special case for length
        if(idName.equals("length")) {
            obj.apply(this);

            if(obj instanceof AIdentifierExp) {
                TId id = ((AIdentifierExp) obj).getName();
                PType type = variableDecls.get(id).getType();
                if(type instanceof AIntarrayType) {
                    return; //Nothing
                }
            }
            if(obj instanceof AArrayAllocExp) {
                return; //Nothing
            }
            if(obj instanceof AFieldAccessExp) {
                ATypedVar field = fieldDecls.get((AFieldAccessExp) obj);
                PType type = field.getType();
                if(type instanceof AIntarrayType) {
                    return; //Nothing
                }
            }
            if(obj instanceof AMethodCallExp) {
                AMethodDecl method = methodDecls.get((AMethodCallExp) obj);
                PType type = method.getRetType();
                if(type instanceof AIntarrayType) {
                    return; //Nothing
                }
            }
        }
        super.caseAFieldAccessExp(node);
    }

    @Override
    public void outAFieldAccessExp(AFieldAccessExp node) {
        PExp obj = node.getObj();
        String idName = node.getName().getText();

        for(AClassDecl classDecl = getClassDecl(obj); classDecl != null; classDecl = getSuperClass(classDecl)) {
            List<PTypedVar> fields = classDecl.getFields();
            for(PTypedVar field : fields) {
                if(((ATypedVar) field).getName().getText().equals(idName)) {
                    fieldDecls.put(node, (ATypedVar) field);
                    variableDecls.put(node.getName(), (ATypedVar) field);
                    return;
                }
            }
        }
        throw new TypeCheckingExpcetion(node, "No suitable field declaration for '" + idName + "' found.");
    }

    @Override
    public void outAMethodCallExp(AMethodCallExp node) {
        PExp obj = node.getObj();
        String idName = node.getName().getText();

        for(AClassDecl classDecl = getClassDecl(obj); classDecl != null; classDecl = getSuperClass(classDecl)) {
            List<PMethodDecl> methods = classDecl.getMethods();
            for(PMethodDecl method : methods) {
                if(((AMethodDecl) method).getName().getText().equals(idName)) {
                    //Check for parameters here? Not needed since no overloading
                    methodDecls.put(node, (AMethodDecl) method);
                    return;
                }
            }
        }
        throw new TypeCheckingExpcetion(node, "No suitable method declaration for '" + idName + "' found.");
    }

    /**
     * @param obj a PExp with a class type
     * @return the class of the object
     */
    private AClassDecl getClassDecl(PExp obj) {
        if(obj instanceof AIdentifierExp) {
            TId id = ((AIdentifierExp) obj).getName();
            PType type = variableDecls.get(id).getType();
            if(type instanceof AClassType) {
                TId classId = ((AClassType) type).getName();
                return classDecls.get(classId);
            }
            throw new TypeCheckingExpcetion(type, "Has to be a class type.");
        }
        if(obj instanceof AObjAllocExp) {
            TId classId = ((AObjAllocExp) obj).getName();
            return classDecls.get(classId);
        }
        if(obj instanceof AFieldAccessExp) {
            ATypedVar field = fieldDecls.get((AFieldAccessExp) obj);
            PType type = field.getType();
            if(type instanceof AClassType) {
                TId classId = ((AClassType) type).getName();
                return classDecls.get(classId);
            }
            throw new TypeCheckingExpcetion(type, "Has to be a class type.");
        }
        if(obj instanceof AMethodCallExp) {
            AMethodDecl method = methodDecls.get((AMethodCallExp) obj);
            PType type = method.getRetType();
            if(type instanceof AClassType) {
                TId classId = ((AClassType) type).getName();

                return classDecls.get(classId);
            }
            throw new TypeCheckingExpcetion(type, "Has to be a class type.");
        }
        if(obj instanceof AThisExp) {
            for(Node iter = obj; !(iter instanceof Start); iter = iter.parent()) {
                if(iter instanceof AClassDecl) {
                    return (AClassDecl) iter;
                }
            }
            throw new TypeCheckingExpcetion(obj, "Used 'this' outside of an object.");
        }
        throw new TypeCheckingExpcetion(obj, "Is no object.");
    }

    private AClassDecl getSuperClass(AClassDecl c) {
        TId name = c.getSuper();
        if(name == null) {
            return null;
        }

        AProgram aProgram = (AProgram) c.parent();

        List<PClassDecl> classes = aProgram.getDecls();
        for(PClassDecl classDec : classes) {
            if(((AClassDecl) classDec).getId().getText().equals(name.getText())) {
                return (AClassDecl) classDec ;
            }
        }
        throw new TypeCheckingExpcetion(name, "No suitable class declaration for '" + name + "' found.");
    }
}
